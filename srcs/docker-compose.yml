version: "1.0"

services:
  nginx:
    build:
      context: ./requirements/nginx
    image: katchogl/nginx:1.0
    container_name: nginx
    depends_on: [ wordpress ]
    volumes: [ wordpressv:/var/www/html/wordpress:ro ]
    # volumes: [ wordpressv:/var/www/html/wordpress:ro, nginxv:/etc/nginx ]
    networks: [ docker-network ]
    ports: [ 443:443 ]
    restart: unless-stopped

  wordpress:
    build:
      context: ./requirements/wordpress
      args:
        WORDPRESS_ADMIN: ${WORDPRESS_ADMIN}
        WORDPRESS_ADMIN_PASSWORD: ${WORDPRESS_ADMIN_PASSWORD}
        WORDPRESS_DB: ${WORDPRESS_DB}
        WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
    image: katchogl/wordpress:1.0
    container_name: wordpress
    depends_on: [ mariadb ]
    # depends_on: [ mariadb, adminer ]
    volumes: [ wordpressv:/var/www/html/wordpress ]
    networks: [ docker-network ]
    restart: unless-stopped
   
  mariadb:
    build:
      context: ./requirements/mariadb
      args:
        MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
        WORDPRESS_ADMIN: ${WORDPRESS_ADMIN}
        WORDPRESS_ADMIN_PASSWORD: ${WORDPRESS_ADMIN_PASSWORD}
        WORDPRESS_DB: ${WORDPRESS_DB}
    image: katchogl/mariadb:1.0
    container_name: mariadb
    volumes: [ mysql-wordpressv:/var/lib/mysql/wordpress ]
    networks: [ docker-network ]
    restart: unless-stopped

  redis:
    build:
      context: ./requirements/redis
    image: katchogl/redis:1.0
    container_name: redis
    depends_on: [ wordpress ]
    volumes: [ wordpressv:/var/www/html/wordpress ]
    networks: [ docker-network ]
    restart: unless-stopped
    environment:
      WP_REDIS_PASSWORD: ${WP_REDIS_PASSWORD}

  # adminer:
  #   build:
  #     context: ./requiremnets/adminer
  #   image: katchogl/adminer:1.0
  #   container_name: adminer
  #   volumes: [ nginxv:/etc/nginx ]
  #   networks: [ docker-network ]
  #   restart: unless-stopped

networks:
  docker-network:
    driver: bridge

volumes:
  wordpressv: {}
  mysql-wordpressv: {}
  # nginxv: {}
